socket() 함수		//소켓을 생성한다. (소켓은 네트워크 통신)
형태: int socket(int af, int type, int protocol)
 1. int af			//인터넷을 통해 통신할 지, 같은 시스템 내에서 프로세스끼리 통신할 지의 여부를 설정
	PF_INET, AF_INET	//IPv4 인터넷 프로토콜을 사용
	PF_INET6		//IPv6 인터넷 프로토콜을 사용
	PF_LOCAL, AF_UNIX	//같은 시스템 내에서 프로세스끼리 통신
	PF_PACKET		//Low level socket을 인터페이스를 이용합니다.
	PF_IPX			//IPX 노벨 프로토콜을 사용합니다.

 2. int type		//데이터의 전송 현태 지정
	SOCK_STREAM		//TCP/IP 프로토콜을 이용
	SOCK_DGRAM		//UDP/IP 프로토콜을 이용

 3. int protocol	//통신에 있어 특정 프로토콜을 사용을 지정하기 위한 변수이며, 보통 0 값을 사용합니다.
	반환 = 생성되는 도중 에러가 발생하면 0보다 작은 값/INVALID_SOCKET 이 리턴.
		//perror("메시지") 오류 메시지를 출력
		//exit("수") C프로그램 자체를 완전 종료하는 기능(주로, 1을 사용)

sockaddr {		//구조체는 소켓의 주소를 담는 기본 구조체 틀의 역할
    u_short		sa_family;		//주소체계
    char		sa_data[14];		//해당 주소체계에서 사용하는 주소 정보
}

sockaddr_in {		//구조체는 IPv4(AF_INET) 주소를 저장하는 구조체! 제일 많이 사용됨
    sa_family_t		sin_family;		//주소체계를 저장하는 필드
    uint16_t		sin_port;		//포트 정보를 저장
    struct in_addr	sin_addr;		//IPv4 주소를 저장
    char		sin_zero[8];		//사용하지 않는 필드 0으로 차 있음
}


bind() 함수		//주소를 바인딩 한다. (소켓을 시스템에 장착. 소켓은 외부와 통신을 위해 사용됨)
형태: int bind(SOCKET s, const struct sockaddr* name, int namelen);
 1. SOCKET s			//현재 서버소켓으로 사용될 소켓
 2. const struct sockaddr* name	//현재 소켓과 연결된 정보를 담고 있는 SOCKADDR_IN 구조체
 3. int namelen			//SOCKADDR_IN 구조체의 크기
	반환 = 성공: 0, 실패: SOCKET_ERROR

listen() 함수		//클라이언트의 접속을 기다린다. (무한으로 돌림) (외부와 TCP연결을 할 수 있도록 큐를 만들고 대기)
형태: int listen(SOCKET s, int backlog);
 1. SOCKET s			//현재 서버소켓으로 사용될 소켓
 2. int backlog			//연결요청 대기 큐의 크기에 대한 설정
	반환 = 성공: 0, 실패: SOCKET_ERROR 

accept() 함수		//클라이언트의 접속을 수락한다.(클라이언트와 연결된 새로운 socket 생성)
형태: SOCKET accept(SOCKET s, struct sockaddr*addr, int *addrlen); 
 1. SOCKET s			//현재 서버소켓으로 사용될 소켓(bind 및 listen이 완료된 상태)
 2. struct sockaddr*addr	//받아들인 Client 주소 및 포트 정보가 저장될 구조체의 주소값
 3. int *addrlen		//sockaddr 구조체의 길이가 저장된 변수의 주소값
	반환 = 성공: 새로운 소켓, 실패: INVALID_SOCKET

connect() 함수		//서버에게 접속하여 TCP 프로토콜 수준의 연결 설정
형태: int connect(SOCKET s, const struct sockaddr* name, int namelen);
 1. SOCKET s			//socket 함수로 생성된 소켓 지정 번호 ex)클라이언트
 2. const struct sockaddr* name	//연결할 서버의 ip 주소와 포트 등의 정보를 담아온다.
 3. int namelen			//server_addr의 크기
	반환 = 성공: 0, 실패: SOCKET_ERROR
	
<아래 두개는 서로 상호작용>
 - send() 함수		//클라이언트와 데이터를 주고받는다
형태: int send(SOCKET s, const char *buf, int len, int flags); 
 1. SOCKET s			//connect, accept으로 연결된 소켓(데이터를 보낼 대상)
 2. const char *buf		//전송할 데이터
 3. int len			//전송할 데이터의 바이트 단 길이
 4. int flags			//전송할 데이터 또는 읽는 방법에 대한 option. 0 또는 bit or 연산으로 설정가능함
 	MSG_DONTROUTE : gateway를 통하지 않고 직접 상대시스템으로 전송
	MSG_DONTWAIT : non blocking에서 사용하는 옵션으로 전송이 block되면 EAGIN, EWOULDBLOCK 오류로 바로 return 함.
	MSG_MORE : 더 전송할 데이터가 있음을 설정함.
	MSG_OOB : out of band(긴급데이터) 데이터를 읽습니다. 주로 X.25에서 접속이 끊겼을 때에 전송되는 데이터
	(flags의 값이 0이면 일반 데이터를 전송하며, write(sockfd, buf, len)를 호출한 것과 같)
	반환 = 성공: 보낸 바이트 수, 실패: SOCKET_ERROR

 - recv() 함수		//클라이언트와 데이터를 주고받는다 - 언제든지 받을 수 있게 thread 로 진행
형태: int recv(SOCKET s, char *buf, int len, int flags);
 1. SOCKET s			//connect, accept으로 연결된 소켓(데이터를 받을 대상)
 2. char *buf			//데이터를 읽어 저장할 버퍼
 3. int len			//읽을 데이터 크기
 4. int flags			//읽을 데이터 유형 또는 읽는 방법에 대한 옵션
 	 MSG_OOB : out of band(긴급데이터) 데이터를 읽습니다. 주로 X.25에서 접속이 끊겼을 때에 전송되는 데이터
	 MSG_PEEK : receive queue의 데이터를 queue에서 제거하지 않고 확인하기 위한 목적으로 설정함
	 MSG_WAITALL : 읽으려는 데이터가 buffer에 찰 때까지 대기함
	 (flags의 값이 0이면 일반 데이터를 수신하며, read(sockfd, buf, len)을 호출한 것과 같음음)
	반환 = 성공: 받은 바이트 수 또는 0(연결 종료 시), 실패: SOCKET_ERROR

closesocket() 함수	//클라이언트와의 연결을 종료한다 (해당 프로세스의 소켓을 닫음)
형태: int closesocket(SOCKET s);
	반환 = 성공: 0, 실패: SOCKET_ERROR
	
memset() 함수		//메모리의 내용을 원하는 크기만큼 특정 값으로 세팅할 수 있는 함수
형태: void* memset(void *ptr, int value, size_t num);
 1. void *ptr			//세팅하고자 하는 메모리의 시작주소
 2. int value			//메모리에 세팅하고자 하는 값
 3. size_t num			//메모리의 크기 한 조각 단위의 길이
 
WSAStartup() 함수		//윈속의 초기화 (처음에 한번만 호출)
형태: int WSAStartup(WORD wVersionRequired, LPWSADATA lpWSAData);
 1. WORD wVersionRequired	//프로그램에서 사용할 소켓이 버전 정보를 전달
 2. LPWSADATA lpWSAData		//WSADATA 구조체 변수의 주소값을 전달
	반환 = 성공: 0, 실패: 0이 아닌 에러 코드 반환
	
WSACleanup() 함수		//윈속의 기능을 종료 (프로그램의 마지막이나 종료처리에서 실행)

ㅡㅡㅡ
 
#include<pthread.h>
pthread 함수
  int pthread_create(pthread_t * restrict thread,
    const pthread_attr_t *restrict attr,
    void *(*start_routine)(void *),
		void *restrict arg);
    
      매개변수 정보
        pthread_t *restrict thread
		      스레드의 식별자
	      const pthread_attr_t *restrict attr
		      설정할 스레드 속성정보(NULL 입력시 기본설정 적용)
	      void *(*start_routine)(void *)
		      스레드가 실행할 함수
	      void *restrict arg
		      스레드가 실행할 함수에 들어갈 인자
